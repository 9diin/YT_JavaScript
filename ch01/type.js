// 2. 타입, 값, 변수

// 프로그래밍 언어에서 표현하고 조작할 수 있는 값의 종류를 타입이라 부르며, 어떤 타입을 지원하는지가 프로그래밍 언어의 가장 기본적인 특징을 이룹니다.
// 프로그램에서 값을 나중에 사용하기 위해 유지하려면 변수에 값을 할당(저장)합니다.
// 변수에서는 이름이 있으며, 프로그램은 변수 이름을 통해 값을 참조합니다.

// 자바스크립트 타입은 기본 타입과 객체 타입 둘로 나뉩니다.
// 자바스크립트 기본 타입에는 숫자, 문자열, 불리언(boolean) 타입이 있습니다.
// null과 undefined는 기본 값이지만, 숫자나 문자열, 불리언에 속하진 않습니다.
// null과 undefined 각 값은 일반적으로 그 타입 자체로 취급해도 무방합니다.
// 또한, 특별한 목적을 가진 심벌(Symbol)이 있습니다. 심벌의 목적은 하위 호환성을 해치지 않으면서 언어의 확장을 정의하는 것입니다.

// 자바스크립트에서 숫자, 문자열, 불리언, 심벌, null, undefined 중 어느 것에도 속하지 않는 값은 모두 객체입니다.
// 객체는 객체 타입의 멤버이며, 프로퍼티의 집합입니다.
// 객체의 각 프로퍼티에는 이름과 값이 있고, 이를 key-value 라고 합니다.
// 이 값은 기본 값일 수도 있고, 다른 객체일 수도 있습니다.
// 일반적인 자바스크립트 객체는 이름 붙은 값의 순서 없는 집합입니다.
// 그러나 자바스크립트에는 특별한 객체인 배열도 있습니다. 배열은 값의 순서 있는 집합이며 각 값은 숫자로 표현됩니다.

// ----------------------------------------------------------------------------------------------------

// 2.1 숫자
// 자바스크립트의 숫자 타입인 Number는 정수와 함께 실수를 대략적으로 표현합니다.

// 2.1.1 정수 리터럴
// 자바스크립트 프로그램에서 10진 정수는 연속된 숫자로 표현합니다.
let num1 = 0;
let num2 = 10;
let num3 = 100;

// 뿐만 아니라, 2진수, 8진수, 16진수도 정수 리터럴 방식으로 선언할 수 있습니다.
// 16진수 리터럴은 0x나 0X로 시작하며 그 뒤에 16진수 숫자를 씁니다. 16진수 숫자는 0부터 9까지의 숫자와 알파벳 a(A)부터 f(F)까지의 문자이며,
// 문자는 10부터 15까지를 나타냅니다.
let num4 = 0xff; // 15*16 + 15 => 255;

// 0b(0B)를 앞에 붙여 표현하면 2진수, 0o(0O)를 앞에 붙여 표현하면 8진수로 정수를 표현할 수 있습니다.

// 2.1.2 부동 소수점 리터럴
// 부동 소수점 리터럴에는 소수점이 포함될 수 있습니다. 즉, 실수의 전통적 문법을 사용합니다.
// 값은 정수 부분, 소수점, 소수점 아래 부분을 순서대로 씁니다.
let pi = 3.14;

// 2.1.3 자바스크립트의 산술 연산
// 자바스크립트는 산술 연산자를 통해 숫자를 조작합니다.
// 흔히 우리가 알고 있는 사칙연산이 이에 해당합니다.
// 덧셈 +
// 뺄셈 -
// 곱셈 *
// 나눗셈 /
// 나머지 %

// 대신, 여기서 한 가지 주의할 점이 있는데요.
// 자바스크립트에서는 0으로 나눠도 에러가 발생하지 않습니다. 무한대 또는 음의 무한대를 반환할 뿐이라는 점입니다.
// 단, 0을 0으로 나누는 경우는 정의되어 있지 않으므로 이 결과는 특별한 값 NaN(숫자가 아님: Not a number)입니다.
// 무한대를 무한대로 나누는 것도 이에 해당합니다.
// 자바스크립트의 Infinity와 NaN은 전역 상수이며 이들은 Number 객체의 프로퍼티로도 존재합니다.

// 0/0 => NaN
// Infinity/Infinity => NaN
// NaN = Number.NaN은 같은 값이며 표현방법만 다를 뿐이라는 점입니다.

let num5 = 123;

console.log(typeof pi); // number
console.log(num5 + undefined); // NaN
console.log(typeof (num5 + undefined)); // number

// NaN(Not a number)이라는 데이터는 타입 자체는 숫자 데이터인데
// 특정한 숫자 값으로 표현할 수 없기 때문에 NaN으로 표시하여 반환합니다.
// 그래서 NaN이라는 값이 출력됐다는 것은 숫자 연산에 숫자가 아닌 다른 값이 포함되어 있을 가능성이 있다는 것을 의미합니다.

// ----------------------------------------------------------------------------------------------------

// 2.2 문자열(텍스트)
// 자바스크립트에서 텍스트를 표현하는 타입은 문자열입니다. 이는 String이라고 표현합니다.

// 2.2.1 문자열 리터럴
// 자바스크립트 프로그램에서 문자열을 사용할 때는 그 문자열을 앞뒤가 맞는 작은 따옴표(''), 큰 따옴표(""), 백틱(``) 쌍으로 묶으면 됩니다.

let str1 = ""; // 빈 문자열: 문자가 들어있지 않은 상태
let str2 = "test code";
let str3 = "3.14";
let str4 = `Hello, World!`;

// 백틱으로 감싼 문자열은 문자열 리터럴 안에 자바스크립트 표현식을 넣을 수 있습니다.
// 이러한 문법을 '보간'이라고 합니다.

let str5 = `Hello,`;
let str6 = "World~!";
let str7 = `${str5} ${str6}`;
console.log(str7); // => Hello, World~!

// 백틱은 일반적인 문자열 리터럴 방식과는 약간의 차이가 있죠?
// 임의의 자바스크립트 표현식을 넣을 수 있는 템플릿 리터럴이라고도 표현합니다.
// ${} 기호 안에 있는 것은 모두 자바스크립트 표현식으로 해석이 됩니다. 단, 중괄호 밖에 있는 것은 모두 일반적인 문자열 리터럴 텍스트이고요.

// ----------------------------------------------------------------------------------------------------

// 2.3 불리언(Boolean)
// 불리언 값은 참 또는 거짓을 표현합니다. 이 타입에는 단 두 가지 값만 존재합니다.
// 바로 예약어인 true와 false입니다.
// 불리언은 조건문, 반복문 등에서 논리적 판단을 수행하는데 주로 사용됩니다.
// 앞서 말했듯이 true와 false라는 두 가지의 값만 사용하는 논리 데이터이며
// true는 긍정의 의미를, false는 부정의 의미를 가지고 있습니다.

const truthy = true;
const falsy = false;

if (truthy) {
    console.log("참 입니다.");
}
