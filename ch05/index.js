// 함수
// 함수는 한 번 정의하면 몇 번이고 호출할 수 있는 자바스크립트 코드 블록입니다.
// 자바스크립트 함수는 매개변수화(parameterized) 됩니다.
// 함수 정의에는 매개변수(parameter)라고 불리는 식별자 리스트가 있는데, 이들은 함수 바디에서 로컬 변수처럼 동작합니다.
// 함수를 호출할 때는 매개변수에 값을 전달하는데 이를 인자(argument)라고 합니다.

// 1. 함수 정의
// 자바스크립트 함수를 정의하는 가장 단순한 방법은 function 키워드를 사용하기 입니다.

// 1.1.1 함수 선언
// 함수 선언은 function 키워드 뒤에 다음 세 가지 구성 요소를 씁니다.
// - 함수 이름이 될 식별자. 이름은 함수 선언에서 뺄 수 없는 부분입니다. 이 이름은 변수 이름으로 쓰이며, 새로 정의된 함수 객체가 이 변수에 할당됩니다.
// - 괄호로 감싸고 콤마로 구분한 0개 이상의 식별자 리스트. 이 식별자들은 함수 매개변수 이름이며 함수 바디 안에서 로컬 변수로 동작합니다.
// - 중괄호로 감싼 0개 이상의 자바스크립트 문. 이 문이 함수 바디이며 함수를 호출할 때마다 실행됩니다.

// 함수 선언문(Declaration)
// 함수 이름이 필수이기 때문에 익명이 불가합니다.
function fn() {}

// 1.1.2 함수 표현식(Expression)
// 함수 표현식은 함수 선언과 거의 비슷하지만, 더 큰 표현식이나 문의 일부로서 존재하고 이름을 붙이지 않아도 된다는 점이 다릅니다.
const fn = function () {};

// 함수를 변수에 할당했습니다.
const square = function (x) {
    return x * x;
};

// 표현식으로 정의한 함수에 이름을 붙이는 것은 선택 사항입니다.
// 함수 선언은 실제로 변수를 선언하며 그 변수에 함수 객체를 할당합니다.
// 함수 표현식은 반드시 변수에 할당해야 하는 것은 아닙니다.
// 다만, 함수 객체를 나중에 다시 참조해야 한다면, 프로그래머의 선택에 따라 변수 또는 상수에 할당합니다.
// 함수 표현식을 쓸 때는 실수로 함수를 덮어 쓰지 않도록 const를 사용하는 것이 좋은 습관입니다.

// 함수 표현식을 다른 함수의 인자로 사용할 수 도 있습니다.
// 이름이 없는 익명함수
[3, 2, 1].sort(function (a, b) {
    return a - b;
});

// 이름 있는 함수로도 가능하지만,
function compareNumbers(a, b) {
    return a - b;
}
[3, 2, 1].sort(compareNumbers);

// 이렇게 하려면 compareNumbers라는 이름을 따로 선언해야 합니다.
// 하지만 한 번 쓰고 말 거라면 굳이 이름 붙일 필요 없이 표현식으로 바로 전달하는 게 더 간결하죠.

// 1.1.3 화살표 함수
// 화살표 함수는 문이 아니라 표현식이므로 function 키워드는 사용하지 않으며 함수 이름도 필요 없습니다.
// 화살표 함수의 일반적인 형태는 괄호 안에 콤마로 구분한 매개변수 리스트를 쓰고, 그 뒤에 => 화살표와 중괄호로 감싼 함수 바디를 쓰는 형태입니다.

// - function 키워드를 사용하지 않음
// - return 키워드로 로직이 시작하는 경우에는 return 키워드와 중괄호를 제거하여 사용할 수 있다.
// - 매개변수를 가질 수 있는데, 만약 매개변수가 단 한 개만 있다고 하면 매개변수를 감싸고 있는 소괄호를 생략할 수 있다.

function sum(a, b) {
    return a + b;
}
console.log(sum(1, 2)); // 3
console.log(sum(10, 20)); // 30

const sum1 = (a, b) => {
    return a + b;
};
const sum2 = (a, b) => a + b;
console.log(sum1(1, 2)); // 3
console.log(sum2(10, 20)); // 30

const test1 = (x) => {
    console.log(x); // 로직이 return으로 바로 시작하지 않기 때문에, 해당 코드는 생략 불가
    return x * x;
};
const test2 = () => {
    return { value: 1 };
};
const test3 = () => {
    value: 1;
}; // 중괄호로 사용된 부분이 마치 함수의 블록처럼 보이기 때문에, 자바스크립트 문법적으로 이해할 수 없는 코드가 들어있기 때문에 오류가 난다.
const test4 = () => ({ value: 1 }); // 위 문제를 해결하기 위해 객체 데이터는 소괄호 묶어준다.
const test5 = () => {
    return [1, 2, 3];
};
const i = () => [1, 2, 3];
